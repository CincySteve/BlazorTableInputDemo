@inherits LayoutComponentBase

@using System.Diagnostics

@namespace BlazorTableInputDemo

<h1>Blazor Table Input Demo</h1>

<table id="mytable" class="bbd-table">
    <tbody>

        @for (int row = 0; row <= 5; row++)
            {
            <tr>

                @for (int col = 0; col < 5; col++)
                    {
                    TableCell cell = CellsListOfLists[row][col];

                    @* Making this "if" false makes the table behave entirely as expected. .
                        Switch the if statements to see how the behavior changes.*@
                    
                    @if (cell.CSSClass == userData)
                    @* @if (false) *@
                        {
                        <td contenteditable="false" class="@cell.CSSClass">
                            <input class="@cell.CSSClass" value="@cell.Value"
                                @onchange="@((ChangeEventArgs e) => OnChange(e, cell.Index_Row, cell.Index_Col))"
                                @onfocusin="@((FocusEventArgs e) => OnFocusIn(e, cell.Index_Row, cell.Index_Col))"
                                @onfocusout="@((FocusEventArgs e) => OnFocusOut(e, cell.Index_Row, cell.Index_Col))" />
                        </td>
                        }
                    else
                        {
                        <td contenteditable="false" class="@cell.CSSClass">

                            @* Adding the even/odd col "if/else" changes the behavior, even though the 2 input statements are the same.
                                Switch the if statement to see the behavior with and without the even/odd col logic.*@

                            @* @if (col % 2 == 0) *@
                            @if (true)
                                {
                                <input class="@cell.CSSClass" placeholder="@cell.Value"
                                    @onchange="@((ChangeEventArgs e) => OnChange(e, cell.Index_Row, cell.Index_Col))"
                                    @onfocusin="@((FocusEventArgs e) => OnFocusIn(e, cell.Index_Row, cell.Index_Col))"
                                    @onfocusout="@((FocusEventArgs e) => OnFocusOut(e, cell.Index_Row, cell.Index_Col))" />
                                }
                            else
                                {
                                <input class="@cell.CSSClass" placeholder="@cell.Value"
                                    @onchange="@((ChangeEventArgs e) => OnChange(e, cell.Index_Row, cell.Index_Col))"
                                    @onfocusin="@((FocusEventArgs e) => OnFocusIn(e, cell.Index_Row, cell.Index_Col))"
                                    @onfocusout="@((FocusEventArgs e) => OnFocusOut(e, cell.Index_Row, cell.Index_Col))" />
                                }
                        </td>
                        }

                    } @*end colIndex*@

            </tr>

            } @*end year*@

    </tbody>
</table>

@code
{
    private List<List<TableCell>> CellsListOfLists { get; set; } = new List<List<TableCell>>();
    private string userData = "userdata";
    private string defaultData = "defaultdata";
    private TableCell lastCell = new TableCell();

    protected override void OnInitialized()
        {
        // Create the data that will populte the table
        CellsListOfLists = new List<List<TableCell>>();

        for (int rowIndex = 0; rowIndex <= 5; rowIndex++)
            {
            List<TableCell> rowCellList = new List<TableCell>();

            for (int colIndex = 0; colIndex < 5; colIndex++)
                {
                TableCell cell = new TableCell();
                cell.Index_Row = rowIndex;
                cell.Index_Col = colIndex;
                cell.CSSClass = defaultData;
                cell.Value = ((rowIndex + 1) * 10 + colIndex).ToString("C0");
                rowCellList.Add(cell);
                } // next colSpec

            CellsListOfLists.Add(rowCellList);
            } // next rowIndex

        // Randomly make 2 cells user data
        CellsListOfLists[2][2].CSSClass = userData;
        CellsListOfLists[2][3].CSSClass = userData;

        lastCell = CellsListOfLists[0][0];
        } // OnInitialized

    protected override async Task OnAfterRenderAsync(bool firstTime)
        {
        Debug.WriteLine($"OnAfterRenderAsync: Row/Col({lastCell.Index_Row}/{lastCell.Index_Col}) | Value({lastCell.Value})");
        }

    protected void OnChange(ChangeEventArgs e, int rowIndex, int colIndex)
        {
        lastCell = CellsListOfLists[rowIndex][colIndex];
        string origValue = lastCell.Value;

        lastCell.CSSClass = userData;
        lastCell.Value = (int.Parse((string)e.Value)).ToString("C0");
        
        Debug.WriteLine($"OnChange: Row/Col({rowIndex}/{colIndex}) | Orig Value({origValue}) | New Value({(string)e.Value}) ");
        } // OnChange

    protected void OnFocusIn(FocusEventArgs e, int rowIndex, int colIndex)
        {
        lastCell = CellsListOfLists[rowIndex][colIndex];

        Debug.WriteLine($"OnFocusIn: Row/Col({rowIndex}/{colIndex}) | Value({lastCell.Value}) ");
        } // OnFocusIn

    protected void OnFocusOut(FocusEventArgs e, int rowIndex, int colIndex)
        {
        lastCell = CellsListOfLists[rowIndex][colIndex];

        Debug.WriteLine($"OnFocusOut: Row/Col({rowIndex}/{colIndex}) | Value({lastCell.Value})");
        } // OnFocusOut

}